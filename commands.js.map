{"version":3,"file":"commands.js","mappings":"YAgBA,SAASA,EAAiBC,GACxB,IAAMC,EAAU,CACdC,KAAMC,OAAOC,aAAaC,4BAA4BC,qBACtDL,QAASD,EACTO,KAAM,aACNC,YAAY,GAIdL,OAAOM,QAAQC,QAAQC,KAAKC,qBAAqBC,aAAa,SAAUZ,EAC1E,CAnBAE,OAAOW,SAAQ,WACb,IAqEFX,OAAOY,QAAQC,UAAU,UAlDzB,SAAgBC,GACdd,OAAOM,QAAQC,QAAQC,KAAKO,qBAAoB,SAACC,GAC/C,GAAIA,EAAOC,SAAWjB,OAAOkB,kBAAkBC,UAAW,CACxD,IAAIC,EAAcJ,EAAOK,MACzBC,QAAQC,IAAIH,GACZ,IAAII,EAAmBJ,EAAYK,KAAI,SAACC,GAAG,YAAAC,OAAWD,EAAIE,KAAI,SAAAD,OAAQD,EAAIG,eAAc,aAAUC,KAAK,KAGvG9B,OAAOM,QAAQC,QAAQC,KAAKuB,KAAKC,SAAS,QAAQ,SAACC,GACjD,GAAIA,EAAWhB,SAAWjB,OAAOkB,kBAAkBC,UAAW,CAC5D,IAGIe,EAHYD,EAAWZ,MAGGG,EAG9BxB,OAAOM,QAAQC,QAAQC,KAAKuB,KAAKI,SAASD,EAAa,CAAEE,aAAc,SAAU,SAACC,GAC5EA,EAAcpB,SAAWjB,OAAOkB,kBAAkBC,WAEpDL,EAAMwB,YACN1C,EAAiB,0CAGjB0B,QAAQiB,MAAM,uBAAwBF,EAAcE,MAAMzC,SAC1DgB,EAAMwB,YACN1C,EAAiB,uBAAyByC,EAAcE,MAAMzC,SAElE,GACF,MAEEwB,QAAQiB,MAAM,uBAAwBN,EAAWM,MAAMzC,SACvDF,EAAiB,uBAAyBqC,EAAWM,MAAMzC,SAE3DgB,EAAMwB,WAEV,GACF,MAEEhB,QAAQiB,MAAM,8BAA+BvB,EAAOuB,MAAMzC,SAC1DF,EAAiB,8BAAgCoB,EAAOuB,MAAMzC,SAE9DgB,EAAMwB,WAEV,IAGAxB,EAAMwB,WACR,G","sources":["webpack://office-addin-taskpane-js/./src/commands/commands.js"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global Office */\n\nOffice.onReady(() => {\n  // If needed, Office.js is ready to be called.\n});\n\n/**\n * Shows a notification when the add-in command is executed.\n * @param event {Office.AddinCommands.Event}\n */\n\nfunction ShowNotification(Notificationmessage) {\n  const message = {\n    type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\n    message: Notificationmessage,\n    icon: \"Icon.80x80\",\n    persistent: true,\n  };\n\n  // Show a notification message.\n  Office.context.mailbox.item.notificationMessages.replaceAsync(\"action\", message);\n}\nfunction action(event) {\n  Office.context.mailbox.item.getAttachmentsAsync((result) => {\n    if (result.status === Office.AsyncResultStatus.Succeeded) {\n      let attachments = result.value;\n      console.log(attachments);\n      let attachmentString = attachments.map((att) => `<< ${att.name} >> (${att.attachmentType})<br/>`).join(\" \");\n\n      // Get the body of the email\n      Office.context.mailbox.item.body.getAsync(\"html\", (bodyResult) => {\n        if (bodyResult.status === Office.AsyncResultStatus.Succeeded) {\n          let emailBody = bodyResult.value;\n\n          // Insert attachment string at the beginning of the email\n          let updatedBody = emailBody + attachmentString;\n\n          // Set the updated body back to the email\n          Office.context.mailbox.item.body.setAsync(updatedBody, { coercionType: \"html\" }, (setBodyResult) => {\n            if (setBodyResult.status === Office.AsyncResultStatus.Succeeded) {\n              // Finish the send event\n              event.completed();\n              ShowNotification(\"Attachments Names added successfully\");\n            } else {\n              // Error handling if setting the body fails\n              console.error(\"Error setting body: \", setBodyResult.error.message);\n              event.completed();\n              ShowNotification(\"Error setting body: \" + setBodyResult.error.message);\n            }\n          });\n        } else {\n          // Error handling if getting the body fails\n          console.error(\"Error getting body: \", bodyResult.error.message);\n          ShowNotification(\"Error getting body: \" + bodyResult.error.message);\n\n          event.completed();\n        }\n      });\n    } else {\n      // Error handling if getting attachments fails\n      console.error(\"Error getting attachments: \", result.error.message);\n      ShowNotification(\"Error getting attachments: \" + result.error.message);\n\n      event.completed();\n    }\n  });\n\n  // Be sure to indicate when the add-in command function is complete.\n  event.completed();\n}\n\n// Register the function with Office.\nOffice.actions.associate(\"action\", action);\n"],"names":["ShowNotification","Notificationmessage","message","type","Office","MailboxEnums","ItemNotificationMessageType","InformationalMessage","icon","persistent","context","mailbox","item","notificationMessages","replaceAsync","onReady","actions","associate","event","getAttachmentsAsync","result","status","AsyncResultStatus","Succeeded","attachments","value","console","log","attachmentString","map","att","concat","name","attachmentType","join","body","getAsync","bodyResult","updatedBody","setAsync","coercionType","setBodyResult","completed","error"],"sourceRoot":""}